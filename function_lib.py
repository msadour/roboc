import pickle
import os

def make_board(level):
    """
    make the boarding game.
    :param level:
    :return: dict of board
    """
    if level == "enfant":
        data =[
            ['0', '0', '0', '0', '0', '0', '0'],
            ['0', '@', '0', '0', ' ', ' ', '0'],
            ['0', ' ', ' ', ' ', ' ', '0', '0'],
            ['0', '0', ' ', '0', ' ', ' ', '0'],
            ['0', '0', ' ', ' ', '0', ' ', '0'],
            ['0', '0', ' ', '0', ' ', '$', '0'],
            ['0', '0', '0', '0', '0', '0', '0']
        ]
    elif level == "facile":
        data = [
            ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
            ['0', '@', '0', ' ', '0', ' ', ' ', ' ', ' ', ' ', ' ', '0'],
            ['0', ' ', '0', ' ', '0', ' ', '0', ' ', ' ', '0', ' ', '0'],
            ['0', ' ', ' ', ' ', ' ', ' ', '0', ' ', ' ', ' ', ' ', '0'],
            ['0', ' ', '0', ' ', '0', ' ', '0', ' ', ' ', '0', ' ', '0'],
            ['0', ' ', ' ', ' ', '0', ' ', '0', ' ', ' ', '0', ' ', '0'],
            ['0', ' ', '0', ' ', ' ', ' ', '0', ' ', ' ', '0', ' ', '0'],
            ['0', ' ', ' ', ' ', '0', ' ', ' ', ' ', ' ', '0', ' ', '0'],
            ['0', ' ', '0', ' ', '0', ' ', '0', ' ', ' ', '0', '$', '0'],
            ['0', ' ', '0', ' ', '0', ' ', '0', ' ', '0', '0', '0', '0'],
            ['0', ' ', ' ', ' ', '0', ' ', '0', ' ', ' ', ' ', ' ', '0'],
            ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0']
        ]
    elif level == "moyen":
        data = [
            ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
            ['0', '@', '0', ' ', '0', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '0'],
            ['0', ' ', ' ', ' ', '0', ' ', '0', ' ', '0', '0', '0', ' ', '0', ' ', '0', ' ', '0'],
            ['0', ' ', '0', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '0', ' ', '0', ' ', '0'],
            ['0', ' ', ' ', ' ', ' ', ' ', '0', ' ', '0', ' ', '0', ' ', '0', '0', '0', ' ', '0'],
            ['0', ' ', '0', ' ', '0', ' ', '0', ' ', '0', ' ', '0', ' ', '0', ' ', '0', '0', '0'],
            ['0', ' ', ' ', ' ', '0', ' ', '0', ' ', '0', ' ', '0', ' ', '0', ' ', ' ', ' ', '0'],
            ['0', ' ', '0', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '0', ' ', '0', ' ', '0', ' ', '0'],
            ['0', ' ', ' ', ' ', '0', ' ', '0', '0', '0', ' ', ' ', ' ', '0', ' ', '0', '$', '0'],
            ['0', ' ', '0', ' ', ' ', ' ', ' ', ' ', '0', ' ', '0', ' ', '0', ' ', '0', '0', '0'],
            ['0', ' ', ' ', ' ', '0', ' ', '0', ' ', ' ', ' ', ' ', ' ', '0', ' ', ' ', ' ', '0'],
            ['0', ' ', '0', ' ', '0', ' ', '0', ' ', '0', '0', ' ', ' ', '0', '0', ' ', ' ', '0'],
            ['0', ' ', ' ', ' ', '0', ' ', '0', ' ', ' ', ' ', '0', '0', '0', ' ', '0', ' ', '0'],
            ['0', ' ', '0', ' ', ' ', ' ', '0', '0', '0', ' ', ' ', ' ', '0', ' ', '0', ' ', '0'],
            ['0', ' ', ' ', ' ', '0', ' ', ' ', ' ', '0', '0', '0', ' ', '0', ' ', '0', ' ', '0'],
            ['0', ' ', '0', ' ', '0', ' ', '0', ' ', ' ', ' ', '0', ' ', ' ', ' ', ' ', ' ', '0'],
            ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0']
            ]
    elif level == "difficile":
        data = [
            ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
            ['0', '@', '0', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '0', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '0'],
            ['0', ' ', ' ', ' ', '0', '0', '0', '0', '0', '0', '0', ' ', '0', '0', '0', '0', '0', '0', '0', '0', ' ', '0'],
            ['0', ' ', '0', ' ', ' ', ' ', '0', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '0', ' ', '0'],
            ['0', ' ', ' ', '0', '0', '0', '0', '0', '0', '0', '0', ' ', '0', '0', '0', '0', '0', '0', '0', '0', ' ', '0'],
            ['0', ' ', '0', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '0', '0', '0', '0', '0', '0', '0', '0', ' ', '0'],
            ['0', ' ', ' ', ' ', '0', '0', '0', '0', '0', '0', '0', '0', '0', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '0'],
            ['0', ' ', '0', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '0', '0', '0', '0', '0', '0', ' ', '0'],
            ['0', ' ', ' ', ' ', '0', '0', '0', '0', '0', '0', '0', ' ', '0', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '0'],
            ['0', ' ', '0', ' ', '0', '0', '0', '0', '0', ' ', ' ', ' ', ' ', ' ', '0', '0', '0', '0', '0', '0', ' ', '0'],
            ['0', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '0', ' ', '0', ' ', '0', ' ', ' ', ' ', ' ', '0', ' ', '0'],
            ['0', ' ', '0', ' ', '0', '0', '0', '0', '0', ' ', '0', ' ', ' ', ' ', '0', '0', '0', '0', ' ', '0', ' ', '0'],
            ['0', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '0', '0', ' ', ' ', ' ', '0', ' ', ' ', ' ', '0'],
            ['0', ' ', '0', ' ', '0', '0', '0', '0', '0', '0', '0', ' ', '0', ' ', ' ', '0', ' ', ' ', '0', '0', ' ', '0'],
            ['0', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '0', ' ', '0', '$', '0', ' ', '0', '0', ' ', '0'],
            ['0', ' ', '0', ' ', '0', '0', '0', '0', '0', '0', '0', ' ', '0', ' ', ' ', ' ', '0', ' ', '0', '0', ' ', '0'],
            ['0', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '0', '0', '0', ' ', ' ', '0', '0', ' ', '0'],
            ['0', ' ', '0', ' ', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', ' ', ' ', ' ', '0', '0', '0', ' ', '0'],
            ['0', ' ', ' ', ' ', '0', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '0', ' ', '0', ' ', ' ', ' ', '0', ' ', '0'],
            ['0', ' ', '0', ' ', '0', '0', '0', '0', '0', '0', '0', '0', ' ', ' ', ' ', '0', ' ', '0', '0', '0', ' ', '0'],
            ['0', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '0', '0', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '0'],
            ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0']
            ]
    elif level == "enfer":
        data = [
            ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
            ['0', '@', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '0', ' ', '0'],
            ['0', ' ', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', ' ', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', ' ', '0'],
            ['0', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '0'],
            ['0', ' ', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', ' ', '0', '0', '0', ' ', '0'],
            ['0', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '0', ' ', '0'],
            ['0', ' ', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', ' ', '0', '0', '0', ' ', '0', '0', '0', '0', '0', '0', ' ', '0', '0', '0', '0', '0'],
            ['0', ' ', ' ', ' ', '0', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '0'],
            ['0', ' ', '0', '0', '0', '0', '0', '0', '0', ' ', '0', '0', '0', '0', '0', '0', '0', '0', '0', ' ', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', ' ', '0'],
            ['0', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '0'],
            ['0', ' ', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', ' ', '0', '0', '0', ' ', '0'],
            ['0', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '0', ' ', ' ', ' ', ' ', ' ', ' ', '0', ' ', '0'],
            ['0', ' ', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', ' ', '0', ' ', '0', ' ', '0', '0', ' ', '0', ' ', '0'],
            ['0', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '0', ' ', '0', ' ', '0', ' ', '0', ' ', ' ', '0', ' ', '0'],
            ['0', ' ', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', ' ', '0', '0', '0', '0', '0', ' ', '0', ' ', ' ', ' ', ' ', ' ', '0', '0', ' ', '0', ' ', '0'],
            ['0', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '0', '$', ' ', ' ', '0', '0', ' ', '0', '0', '0', '0', '0', ' ', ' ', '0', ' ', '0', ' ', '0'],
            ['0', ' ', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', ' ', '0', '0', '0', ' ', '0', '0', ' ', '0', ' ', ' ', ' ', '0', '0', '0', '0', '0', '0', ' ', '0'],
            ['0', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '0', ' ', '0', ' ', '0', ' ', '0', ' ', ' ', ' ', ' ', '0', ' ', '0', ' ', ' ', ' ', ' ', ' ', ' ', '0'],
            ['0', ' ', '0', '0', '0', '0', '0', '0', '0', '0', ' ', '0', ' ', '0', ' ', '0', ' ', '0', '0', '0', '0', '0', '0', ' ', '0', '0', '0', '0', ' ', '0', ' ', '0'],
            ['0', ' ', ' ', ' ', ' ', '0', ' ', ' ', ' ', ' ', ' ', '0', ' ', '0', ' ', '0', ' ', ' ', ' ', ' ', ' ', '0', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '0', ' ', '0'],
            ['0', ' ', '0', '0', '0', '0', '0', '0', '0', '0', ' ', '0', ' ', ' ', ' ', '0', ' ', '0', ' ', '0', ' ', '0', ' ', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
            ['0', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '0', '0', '0', '0', '0', '0', ' ', '0', ' ', '0', ' ', '0', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '0'],
            ['0', ' ', '0', '0', '0', '0', '0', '0', '0', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '0', ' ', '0', '0', '0', ' ', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
            ['0', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '0', '0', '0', '0', '0', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '0'],
            ['0', ' ', '0', '0', '0', '0', '0', '0', '0', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', ' ', '0'],
            ['0', ' ', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', ' ', ' ', ' ', ' ', ' ', ' ', '0', ' ', '0', '0', '0', '0', '0', '0', ' ', ' ', '0'],
            ['0', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '0', '0', '0', '0', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '0', '0'],
            ['0', ' ', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', ' ', '0'],
            ['0', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '0'],
            ['0', ' ', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', ' ', '0'],
            ['0', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '0'],
            ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0']]

    return (level, data)

def choose_level(dict_of_level={}):
    """
    Select the level and check if the level selected is good.
    :param :
    :return: level
    """
    choice_good = False
    liste_good_choice = ['enfant', 'facile', 'moyen', 'difficile', 'enfer']
    while choice_good is False:
        level = input("veuillez choisir votre niveau : (enfant - facile - moyen - difficile - enfer : ")
        if level not in liste_good_choice:
            print('Saisie incorrect .. \n')
        else:
            if level in dict_of_level.keys():
                if dict_of_level[level]['is_finish'] == True:
                    print("Vous avez deja fini ce niveau, choisissez en un autre ..")
                else:
                    choice_good = True
                    return level
            else:
                choice_good = True
                return level

def choose_direction():
    """
    Select the direction and check if the direction selected is good.
    :param :
    :return: level
    """
    choice_good = False
    liste_good_choice = ['o', 'e', 'n', 's', 'q']
    while choice_good is False:
        direction = input("Que voulez vous faire? (o - e - n - s - q) ? ")
        if direction not in liste_good_choice:
            print('Saisie incorrect .. \n')
        else:
            choice_good = True
            return direction

def choose_nb_move():
    """
    Select the number of move and check if the number selected is good.
    :param :
    :return: level
    """
    choice_good = False
    while choice_good is False:
        try:
            nb_move = input("De combien de case? ")
            nb_move = int(nb_move)
        except ValueError:
            print("Vous devez saisir un nombre de case valide !")
        else:
            choice_good = True
            return nb_move

def get_info_player():
    """
    Get the dict of users. The dict look like it :
    {player_name_1 : {esay : { 'position' : (2,2)}}, player_name_2 : {hard : { 'position' : (3,5)}} .... }
    :param :
    :return: level
    """
    if os.path.getsize('info_player') > 0:
        with open('info_player', 'rb') as file:
            my_depickler = pickle.Unpickler(file)
            users = my_depickler.load()
    else:
        users = {}
    return users

def save_info_player(user):
    """
    save informations about the current user (level and position)
    :param : user
    :return:
    """
    with open('info_player', 'wb') as file:
        my_pickler = pickle.Pickler(file)
        my_pickler.dump(user)